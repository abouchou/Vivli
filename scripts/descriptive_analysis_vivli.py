# -*- coding: utf-8 -*-
"""Descriptive analysis vivli.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DCgJO8QXb6RWk_jDFsEHvNx6nfiU_pD1
"""

# üì¶ Install required packages
!pip install pandas plotly statsmodels
!pip install kaleido==0.2.1

"""# üß™ Vivli 2025 ‚Äì Objective 1
This notebook combines interactive exploration and statistical analysis to track emerging cefiderocol resistance from SIDERO-WT surveillance data.

## üìÅ Upload Cleaned SIDERO Dataset
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Load cleaned data
df = pd.read_csv("cleaned_sidero_obj1.csv")

# Define resistance categories
df["non_susceptible_flag"] = df["cefiderocol_mic"] >= 4
df["clsi_resistant_flag"] = df["cefiderocol_mic"] >= 16

def clsi_category(mic):
    if pd.isna(mic):
        return pd.NA
    elif mic <= 4:
        return "S"
    elif mic == 8:
        return "I"
    elif mic >= 16:
        return "R"
    else:
        return pd.NA

df["clsi_category"] = df["cefiderocol_mic"].apply(clsi_category)

# === Plot 1: Resistance Trends Over Time ===
res_year = df.groupby("year")[["non_susceptible_flag", "clsi_resistant_flag"]].mean().reset_index()

fig1 = go.Figure()
fig1.add_trace(go.Scatter(x=res_year["year"], y=res_year["non_susceptible_flag"],
                          mode='lines+markers', name='Non-susceptible (MIC ‚â• 4)', line=dict(color='orange')))
fig1.add_trace(go.Scatter(x=res_year["year"], y=res_year["clsi_resistant_flag"],
                          mode='lines+markers', name='CLSI-Resistant (MIC ‚â• 16)', line=dict(color='red')))
fig1.update_layout(
    title="üìà Cefiderocol Resistance Trends Over Time",
    xaxis_title="Year",
    yaxis_title="Proportion of Isolates",
    yaxis_tickformat=".0%",
    template="plotly_white"
)
fig1.show()

# === Plot 2: CLSI S/I/R Distribution ===
clsi_counts = df["clsi_category"].value_counts(dropna=False).reset_index()
clsi_counts.columns = ["CLSI Category", "Count"]
fig2 = px.pie(clsi_counts, values="Count", names="CLSI Category",
              title="üìä CLSI Categorization of Cefiderocol MICs",
              color_discrete_sequence=px.colors.qualitative.Pastel)
fig2.show()

# === Plot 3: Regional Resistance Comparison ===
region_res = df.groupby("region")[["non_susceptible_flag", "clsi_resistant_flag"]].mean().reset_index()

fig3 = go.Figure()
fig3.add_trace(go.Bar(x=region_res["region"], y=region_res["non_susceptible_flag"],
                      name="Non-susceptible (MIC ‚â• 4)", marker_color="orange"))
fig3.add_trace(go.Bar(x=region_res["region"], y=region_res["clsi_resistant_flag"],
                      name="CLSI-Resistant (MIC ‚â• 16)", marker_color="red"))
fig3.update_layout(
    title="üåç Regional Comparison of Resistance Rates",
    xaxis_title="Region",
    yaxis_title="Resistance Rate",
    barmode="group",
    yaxis_tickformat=".0%",
    template="plotly_white"
)
fig3.show()

"""## üìà Median MIC Over Time"""

import plotly.io as pio
import plotly.express as px

mic_by_year = df.groupby("year")["cefiderocol_mic"].median().reset_index()

fig1= px.line(
    mic_by_year, x="year", y="cefiderocol_mic", markers=True,
    title="üìà Median MIC Over Time",
    labels={"cefiderocol_mic": "Median MIC (¬µg/mL)"}
)

fig1.show()

# ‚úÖ Save as image
pio.write_image(fig1, "median_mic_over_time.png", format="png", scale=2, width=1000, height=500)

from google.colab import files
files.download("median_mic_over_time.png")

"""## üß¨ MIC by Top 5 Species"""

top_species = df["species"].value_counts().head(5).index
df_top = df[df["species"].isin(top_species)]
fig4 = px.line(df_top, x="year", y="cefiderocol_mic", color="species", markers=True,
              title="üß¨ Median MIC by Top 5 Species",
              labels={"cefiderocol_mic": "Median MIC (¬µg/mL)"})
fig4.show()

fig5 = px.box(df[df["species"].isin(top_species)],
             x="species", y="cefiderocol_mic", color="species",
             title="üì¶ MIC Distribution by Top 5 Species",
             labels={"cefiderocol_mic": "Cefiderocol MIC (¬µg/mL)"})
fig5.show()

pio.write_image(fig2, "mic_distribution_by_top_5_species.png", format="png", scale=2, width=1000, height=500)

# ‚úÖ Step 3: Download image
from google.colab import files
files.download("mic_distribution_by_top_5_species.png")

# Step 1: Filter top 5 species
top_species = df["species"].value_counts().head(5).index.tolist()
df_top = df[df["species"].isin(top_species)]

# Step 2: Sort by median MIC for clean alignment
sorted_species = (
    df_top.groupby("species")["cefiderocol_mic"]
    .median()
    .sort_values()
    .index.tolist()
)

# Step 3: Resistance rates by species
resistance_rates = (
    df_top.groupby("species")["cefiderocol_resistant"]
    .mean()
    .reindex(sorted_species)
    .round(3)
)

# Step 4: Create side-by-side subplots
fig = make_subplots(
    rows=1, cols=2,
    column_widths=[0.55, 0.45],
    specs=[[{"type": "box"}, {"type": "bar"}]],
    shared_yaxes=True,
    subplot_titles=(
        "üì¶ MIC Distribution by Species",
        "‚ö†Ô∏è Cefiderocol Resistance Rate"
    )
)

# Step 5: Add Boxplots (col 1)
colors = px.colors.qualitative.Set2
for i, species in enumerate(sorted_species):
    mic_vals = df_top[df_top["species"] == species]["cefiderocol_mic"]
    fig.add_trace(
        go.Box(
            y=[species] * len(mic_vals),  # Use species as y for box alignment
            x=mic_vals,
            name=species,
            boxpoints='outliers',
            boxmean='sd',
            orientation='h',
            marker_color=colors[i % len(colors)],
            line_color='darkslategray',
            showlegend=False
        ),
        row=1, col=1
    )

# Step 6: Add Bar Plot (col 2)
fig.add_trace(
    go.Bar(
        x=resistance_rates.values,
        y=sorted_species,
        orientation='h',
        text=[f"{v:.1%}" for v in resistance_rates.values],
        textposition="outside",
        marker_color="indianred",
        showlegend=False
    ),
    row=1, col=2
)

# Step 7: Layout Cleanup
fig.update_layout(
    title_text="üß¨ MIC Distribution vs Resistance Rate (Top 5 Species)",
    title_font_size=18,
    font=dict(size=13),
    height=500,
    width=1000,
    margin=dict(t=60, b=40, l=80, r=20),
    plot_bgcolor='white'
)

# Axis Labels
fig.update_xaxes(title_text="MIC (¬µg/mL)", row=1, col=1)
fig.update_xaxes(title_text="Resistance Rate", row=1, col=2)
fig.update_yaxes(title_text="Species", row=1, col=1)
fig.update_yaxes(title_text="", row=1, col=2)

fig.show()

pio.write_image(fig2, "mic_distribution_vs_resistance_rate.png", format="png", scale=2, width=1000, height=500)

# ‚úÖ Step 3: Download image
from google.colab import files
files.download("mic_distribution_vs_resistance_rate.png")

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Load data
df = pd.read_csv("cleaned_sidero_obj1.csv")

# Step 1: Filter top 5 species by count
top_species = df["species"].value_counts().head(5).index.tolist()
df_top = df[df["species"].isin(top_species)]

# Step 2: Sort by median MIC
sorted_species = (
    df_top.groupby("species")["cefiderocol_mic"]
    .median()
    .sort_values()
    .index.tolist()
)

# Step 3: Calculate resistance & non-susceptibility rates
resistance_rates = (
    df_top.groupby("species")["clsi_resistant_flag"]
    .mean()
    .reindex(sorted_species)
)

non_suscept_rates = (
    df_top.groupby("species")["non_susceptible_flag"]
    .mean()
    .reindex(sorted_species)
)

# Step 4: Create side-by-side subplots
fig = make_subplots(
    rows=1, cols=2,
    column_widths=[0.55, 0.45],
    specs=[[{"type": "box"}, {"type": "bar"}]],
    shared_yaxes=True,
    subplot_titles=(
        "üì¶ MIC Distribution by Species",
        "‚ö†Ô∏è Resistance vs Non-Susceptibility Rate"
    )
)

# Step 5: Boxplots
for species in sorted_species:
    mic_vals = df_top[df_top["species"] == species]["cefiderocol_mic"]
    fig.add_trace(
        go.Box(
            y=[species] * len(mic_vals),
            x=mic_vals,
            name=species,
            orientation='h',
            boxpoints='outliers',
            boxmean='sd',
            line_color='darkslateblue',
            showlegend=False
        ),
        row=1, col=1
    )

# Step 6: Bar plot for resistance + non-susceptibility
fig.add_trace(
    go.Bar(
        x=resistance_rates.values,
        y=sorted_species,
        orientation='h',
        name="Resistant (‚â•16)",
        marker_color="indianred"
    ),
    row=1, col=2
)

fig.add_trace(
    go.Bar(
        x=non_suscept_rates.values,
        y=sorted_species,
        orientation='h',
        name="Non-Susceptible (‚â•4)",
        marker_color="goldenrod"
    ),
    row=1, col=2
)

# Layout
fig.update_layout(
    title="üß¨ MIC Distribution vs Resistance Rate (Top 5 Species)",
    barmode="group",
    height=550,
    width=1000,
    margin=dict(t=60, b=40, l=80, r=20),
    font=dict(size=13)
)

fig.update_xaxes(title_text="MIC (¬µg/mL)", row=1, col=1)
fig.update_xaxes(title_text="Proportion", row=1, col=2)
fig.update_yaxes(title_text="Species")

fig.show()

"""## üåç MIC by Region"""

mic_by_region = df.groupby("region")["cefiderocol_mic"].median().reset_index()
fig = px.bar(mic_by_region, x="region", y="cefiderocol_mic", text_auto=".2f",
             title="üåç Median MIC by Region",
             labels={"cefiderocol_mic": "Median MIC"})
fig.show()

pio.write_image(fig2, "median_mic_by_region.png", format="png", scale=2, width=1000, height=500)

# ‚úÖ Step 3: Download image
from google.colab import files
files.download("median_mic_by_region.png")

"""## ‚ö†Ô∏è Resistance Rate by Region"""

res_by_region = df.groupby("region")["cefiderocol_resistant"].mean().reset_index()
fig = px.bar(res_by_region, x="region", y="cefiderocol_resistant", text_auto=".2f",
             title="‚ö†Ô∏è Cefiderocol Resistance Rate by Region",
             labels={"cefiderocol_resistant": "Resistance Rate"})
fig.show()

pio.write_image(fig2, "cefedericol_resistance_rate_by_region.png", format="png", scale=2, width=1000, height=500)

# ‚úÖ Step 3: Download image
from google.colab import files
files.download("cefedericol_resistance_rate_by_region.png")

"""## üî• Resistance Frequency by Species and Year"""

res_grouped = df[df["species"].isin(top_species)].groupby(["species", "year"])["cefiderocol_resistant"].mean().reset_index()
fig = px.bar(res_grouped, x="year", y="cefiderocol_resistant", color="species", barmode="group",
             title="üî• Resistance Frequency by Species and Year",
             labels={"cefiderocol_resistant": "Resistance Rate"})
fig.show()

pio.write_image(fig2, "resistance_frequency_by_species_and_year.png", format="png", scale=2, width=1000, height=500)

# ‚úÖ Step 3: Download image
from google.colab import files
files.download("resistance_frequency_by_species_and_year.png")

import pandas as pd
import plotly.express as px
import plotly.io as pio
from google.colab import files

# üì• Load your cleaned dataframe if not already in memory
df = pd.read_csv("cleaned_sidero_obj1.csv")

# üìä Filter to top 5 species based on frequency
top_species = df["species"].value_counts().head(5).index.tolist()

# üîÅ Group by species and year for CLSI resistance flag
res_grouped = (
    df[df["species"].isin(top_species)]
    .groupby(["species", "year"])["clsi_resistant_flag"]
    .mean()
    .reset_index()
)

# üìà Create grouped bar plot
fig = px.bar(
    res_grouped,
    x="year", y="clsi_resistant_flag",
    color="species",
    barmode="group",
    title="üî• Resistance Frequency by Species and Year (CLSI ‚â• 16)",
    labels={"clsi_resistant_flag": "Resistance Rate", "year": "Year"},
)

fig.update_layout(width=1000, height=500)
fig.show()

# üíæ Save and download image
pio.write_image(fig, "resistance_frequency_by_species_and_year.png", format="png", scale=2, width=1000, height=500)
files.download("resistance_frequency_by_species_and_year.png")

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import plotly.io as pio
from google.colab import files

# üì• Load data (if not yet loaded)
df = pd.read_csv("cleaned_sidero_obj1.csv")

# Step 1: Clean & prep
df_clean = df.copy()
df_clean = df_clean[df_clean["region"].notna() & df_clean["species"].notna() & df_clean["year"].notna()]
df_clean["region"] = df_clean["region"].str.strip()
df_clean["species"] = df_clean["species"].str.strip()
df_clean["year"] = df_clean["year"].astype(int)

# Step 2: Top 5 species per region
species_counts = (
    df_clean.groupby(["region", "species"])
    .size().reset_index(name="count")
    .sort_values(["region", "count"], ascending=[True, False])
    .groupby("region").head(5)
)

df_top = df_clean.merge(species_counts[["region", "species"]], on=["region", "species"])

# Step 3: Resistance calculation (CLSI R)
res_rate = (
    df_top.groupby(["region", "year", "species"])["clsi_resistant_flag"]
    .mean().reset_index()
)
res_rate["clsi_resistant_flag"] = res_rate["clsi_resistant_flag"].round(3)

# Step 4: Keep regions with at least some data
region_with_data = (
    res_rate.groupby("region")["clsi_resistant_flag"]
    .sum().loc[lambda x: x > 0].index.tolist()
)
res_filtered = res_rate[res_rate["region"].isin(region_with_data)]

# Step 5: Set up color map
all_species = sorted(res_filtered["species"].unique())
color_palette = px.colors.qualitative.Set2
color_map = {species: color_palette[i % len(color_palette)] for i, species in enumerate(all_species)}

# Step 6: Prepare subplots
n_regions = len(region_with_data)
cols = 2
rows = -(-n_regions // cols)

fig = make_subplots(
    rows=rows, cols=cols,
    subplot_titles=region_with_data,
    shared_yaxes=False,
    vertical_spacing=0.15
)

# Step 7: Add traces
legend_species = set()
region_pos = {region: (i // cols + 1, i % cols + 1) for i, region in enumerate(region_with_data)}

for region in region_with_data:
    row, col = region_pos[region]
    data = res_filtered[res_filtered["region"] == region]

    for species in sorted(data["species"].unique()):
        sp_data = data[data["species"] == species]
        fig.add_trace(
            go.Bar(
                x=sp_data["year"],
                y=sp_data["clsi_resistant_flag"],
                name=species,
                marker_color=color_map[species],
                showlegend=species not in legend_species,
                legendgroup=species,
                hovertemplate=f"<b>{species}</b><br>Year: %{{x}}<br>Resistance: %{{y:.1%}}<extra></extra>"
            ),
            row=row, col=col
        )
        legend_species.add(species)

# Step 8: Layout
fig.update_layout(
    height=320 * rows,
    width=1100,
    title_text="ü¶† Resistance Frequency by Top Species and Region (CLSI ‚â• 16 ¬µg/mL)",
    barmode="group",
    font=dict(size=13),
    plot_bgcolor="white",
    showlegend=True,
    legend_title_text="Species",
    margin=dict(t=70, b=40, l=60, r=20)
)
fig.update_yaxes(title_text="Resistance Rate", tickformat=".0%")
fig.update_xaxes(title_text="Year")

fig.show()

# ‚úÖ Save and download image
pio.write_image(fig, "resistance_frequency_by_top_species_and_region.png", format="png", scale=2, width=1000, height=500)
files.download("resistance_frequency_by_top_species_and_region.png")