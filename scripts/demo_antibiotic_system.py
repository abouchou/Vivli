#!/usr/bin/env python3
"""
Script de d√©monstration du syst√®me de recommandation d'antibiotiques.
Teste le syst√®me avec diff√©rents cas cliniques r√©els.
"""

import pandas as pd
import numpy as np
from antibiotic_decision_tree import AntibioticDecisionTree
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os

def run_demo():
    """Ex√©cute une d√©monstration compl√®te du syst√®me."""
    print("=== D√âMONSTRATION DU SYST√àME DE RECOMMANDATION D'ANTIBIOTIQUES ===\n")
    
    # Cr√©er le mod√®le
    print("1. Initialisation du mod√®le...")
    model = AntibioticDecisionTree()
    
    # Charger les donn√©es
    model.load_atlas_data()
    
    # Pr√©parer et entra√Æner le mod√®le
    antibiotic_columns = model.prepare_antibiotic_data()
    scores_df = model.calculate_antibiotic_scores(antibiotic_columns)
    model.determine_antibiotic_order(scores_df, antibiotic_columns)
    features_df = model.create_decision_features(scores_df)
    model.train_decision_tree(features_df)
    
    print("‚úÖ Mod√®le entra√Æn√© avec succ√®s !\n")
    
    # Cas de d√©monstration
    demo_cases = [
        {
            'name': 'Infection urinaire √† E. coli',
            'species': 'Escherichia coli',
            'country': 'France',
            'year': 2023,
            'description': 'Patient de 45 ans avec infection urinaire compliqu√©e'
        },
        {
            'name': 'Pneumonie √† Pseudomonas',
            'species': 'Pseudomonas aeruginosa',
            'country': 'Germany',
            'year': 2023,
            'description': 'Patient de 67 ans avec pneumonie nosocomiale'
        },
        {
            'name': 'Bact√©ri√©mie √† Staphylococcus',
            'species': 'Staphylococcus aureus',
            'country': 'United States',
            'year': 2023,
            'description': 'Patient de 28 ans avec bact√©ri√©mie communautaire'
        },
        {
            'name': 'Infection √† Klebsiella',
            'species': 'Klebsiella pneumoniae',
            'country': 'Italy',
            'year': 2023,
            'description': 'Patient de 52 ans avec infection abdominale post-op√©ratoire'
        }
    ]
    
    # G√©n√©rer les recommandations pour chaque cas
    print("2. G√©n√©ration des recommandations pour diff√©rents cas cliniques...\n")
    
    for i, case in enumerate(demo_cases, 1):
        print(f"--- CAS {i}: {case['name']} ---")
        print(f"Description: {case['description']}")
        print(f"Esp√®ce: {case['species']}")
        print(f"Pays: {case['country']}")
        print(f"Ann√©e: {case['year']}")
        
        try:
            recommendations = model.recommend_antibiotics(
                species=case['species'],
                country=case['country'],
                year=case['year']
            )
            
            print("\nRecommandations d'antibiotiques :")
            for j, ab in enumerate(recommendations[:10], 1):  # Afficher les 10 premiers
                if ab == 'Cefiderocol':
                    print(f"{j}. {ab} (dernier recours)")
                else:
                    print(f"{j}. {ab}")
            
            if len(recommendations) > 10:
                print(f"... et {len(recommendations) - 10} autres antibiotiques")
            
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        print("\n" + "-"*60 + "\n")
    
    # Analyser les profils de r√©sistance
    print("3. Analyse des profils de r√©sistance par esp√®ce...\n")
    
    species_to_analyze = ['Escherichia coli', 'Pseudomonas aeruginosa', 'Staphylococcus aureus', 'Klebsiella pneumoniae']
    
    for species in species_to_analyze:
        print(f"--- Profil de r√©sistance: {species} ---")
        
        # Filtrer les donn√©es pour l'esp√®ce
        species_data = model.data[model.data['Species'] == species]
        
        if len(species_data) > 0:
            # Calculer les taux de r√©sistance
            resistance_rates = {}
            for col in species_data.columns:
                if col.endswith('_resistant'):
                    antibiotic = col.replace('_resistant', '')
                    resistance_rate = species_data[col].mean()
                    resistance_rates[antibiotic] = resistance_rate
            
            # Afficher les antibiotiques avec la plus forte r√©sistance
            sorted_resistance = sorted(resistance_rates.items(), key=lambda x: x[1], reverse=True)
            
            print("Antibiotiques avec forte r√©sistance (>50%):")
            for ab, rate in sorted_resistance[:5]:
                if rate > 0.5:
                    print(f"  - {ab}: {rate:.1%}")
            
            print("Antibiotiques avec r√©sistance mod√©r√©e (20-50%):")
            for ab, rate in sorted_resistance[:5]:
                if 0.2 <= rate <= 0.5:
                    print(f"  - {ab}: {rate:.1%}")
        else:
            print(f"Aucune donn√©e trouv√©e pour {species}")
        
        print()
    
    # G√©n√©rer un rapport de synth√®se
    print("4. G√©n√©ration du rapport de synth√®se...\n")
    
    generate_summary_report(model, demo_cases)
    
    print("‚úÖ D√©monstration termin√©e avec succ√®s !")
    print("\nFichiers g√©n√©r√©s dans le dossier 'outputs/':")
    print("- antibiotic_decision_tree_report.md")
    print("- antibiotic_decision_tree.png")
    print("- demo_summary_report.md")

def generate_summary_report(model, demo_cases):
    """G√©n√®re un rapport de synth√®se de la d√©monstration."""
    
    report = f"""# Rapport de Synth√®se - D√©monstration du Syst√®me de Recommandation d'Antibiotiques

## Date de g√©n√©ration
{datetime.now().strftime('%d/%m/%Y √† %H:%M')}

## Vue d'ensemble
Ce rapport pr√©sente les r√©sultats de la d√©monstration du syst√®me de recommandation d'antibiotiques bas√© sur les donn√©es ATLAS.

## Cas cliniques test√©s

"""
    
    for i, case in enumerate(demo_cases, 1):
        report += f"""### Cas {i}: {case['name']}
- **Description**: {case['description']}
- **Esp√®ce**: {case['species']}
- **Pays**: {case['country']}
- **Ann√©e**: {case['year']}

"""
        
        try:
            recommendations = model.recommend_antibiotics(
                species=case['species'],
                country=case['country'],
                year=case['year']
            )
            
            report += "**Recommandations principales :**\n"
            for j, ab in enumerate(recommendations[:5], 1):
                if ab == 'Cefiderocol':
                    report += f"{j}. {ab} (dernier recours)\n"
                else:
                    report += f"{j}. {ab}\n"
            
            if len(recommendations) > 5:
                report += f"... et {len(recommendations) - 5} autres options\n"
            
        except Exception as e:
            report += f"Erreur: {e}\n"
        
        report += "\n"
    
    # Statistiques globales
    report += """## Statistiques globales

### Esp√®ces bact√©riennes les plus fr√©quentes
"""
    
    species_counts = model.data['Species'].value_counts()
    for species, count in species_counts.head(10).items():
        report += f"- {species}: {count:,} isolats\n"
    
    report += f"""

### Pays avec le plus de donn√©es
"""
    
    country_counts = model.data['Country'].value_counts()
    for country, count in country_counts.head(10).items():
        report += f"- {country}: {count:,} isolats\n"
    
    report += f"""

### Distribution temporelle
"""
    
    year_counts = model.data['Year'].value_counts().sort_index()
    for year, count in year_counts.items():
        report += f"- {year}: {count:,} isolats\n"
    
    report += """

## Recommandations d'utilisation

### Pour les cliniciens
1. **Validation clinique** : Toujours valider les recommandations avec l'antibiogramme local
2. **Consid√©rations patient** : Tenir compte des allergies, contre-indications et fonction r√©nale/h√©patique
3. **Surveillance** : Monitorer l'efficacit√© et ajuster si n√©cessaire
4. **Dernier recours** : La c√©fid√©rocol doit √™tre r√©serv√©e aux cas de r√©sistance multiple

### Pour les microbiologistes
1. **Interpr√©tation des MIC** : Utiliser les seuils de r√©sistance appropri√©s
2. **M√©canismes de r√©sistance** : Consid√©rer les m√©canismes sous-jacents
3. **√âvolution temporelle** : Surveiller les tendances de r√©sistance
4. **Collaboration** : Travailler en √©troite collaboration avec les cliniciens

## Limitations

1. **Donn√©es ATLAS** : Le mod√®le est bas√© sur les donn√©es disponibles dans ATLAS
2. **G√©n√©ralisation** : Les recommandations peuvent varier selon le contexte local
3. **√âvolution** : Les profils de r√©sistance √©voluent dans le temps
4. **Validation** : N√©cessite une validation clinique avant utilisation

## Conclusion

Ce syst√®me fournit un cadre pour la recommandation d'antibiotiques bas√© sur les donn√©es √©pid√©miologiques. Il doit √™tre utilis√© comme un outil d'aide √† la d√©cision, en compl√©ment de l'expertise clinique et microbiologique.

---
*G√©n√©r√© automatiquement par le syst√®me de recommandation d'antibiotiques*
"""
    
    # Sauvegarder le rapport
    output_path = "outputs/demo_summary_report.md"
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üìÑ Rapport de synth√®se g√©n√©r√© : {output_path}")

def create_visualization_dashboard():
    """Cr√©e un tableau de bord de visualisation."""
    print("5. Cr√©ation du tableau de bord de visualisation...\n")
    
    # Charger les donn√©es
    model = AntibioticDecisionTree()
    model.load_atlas_data()
    
    # Cr√©er les visualisations
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    
    # 1. Distribution des esp√®ces
    species_counts = model.data['Species'].value_counts().head(10)
    axes[0, 0].barh(range(len(species_counts)), species_counts.values)
    axes[0, 0].set_yticks(range(len(species_counts)))
    axes[0, 0].set_yticklabels(species_counts.index, fontsize=8)
    axes[0, 0].set_xlabel('Nombre d\'isolats')
    axes[0, 0].set_title('Top 10 des esp√®ces bact√©riennes')
    
    # 2. Distribution g√©ographique
    country_counts = model.data['Country'].value_counts().head(10)
    axes[0, 1].bar(range(len(country_counts)), country_counts.values)
    axes[0, 1].set_xticks(range(len(country_counts)))
    axes[0, 1].set_xticklabels(country_counts.index, rotation=45, fontsize=8)
    axes[0, 1].set_ylabel('Nombre d\'isolats')
    axes[0, 1].set_title('Top 10 des pays')
    
    # 3. √âvolution temporelle
    year_counts = model.data['Year'].value_counts().sort_index()
    axes[1, 0].plot(year_counts.index, year_counts.values, marker='o')
    axes[1, 0].set_xlabel('Ann√©e')
    axes[1, 0].set_ylabel('Nombre d\'isolats')
    axes[1, 0].set_title('√âvolution temporelle des donn√©es')
    
    # 4. R√©sistance globale (exemple avec quelques antibiotiques)
    antibiotic_columns = ['Meropenem', 'Ciprofloxacin', 'Colistin', 'Vancomycin']
    resistance_rates = {}
    
    for ab in antibiotic_columns:
        if ab in model.data.columns:
            resistant_col = f"{ab}_resistant"
            if resistant_col in model.data.columns:
                resistance_rates[ab] = model.data[resistant_col].mean()
    
    if resistance_rates:
        axes[1, 1].bar(range(len(resistance_rates)), list(resistance_rates.values()))
        axes[1, 1].set_xticks(range(len(resistance_rates)))
        axes[1, 1].set_xticklabels(resistance_rates.keys(), rotation=45)
        axes[1, 1].set_ylabel('Taux de r√©sistance')
        axes[1, 1].set_title('R√©sistance globale par antibiotique')
        axes[1, 1].set_ylim(0, 1)
    
    plt.tight_layout()
    plt.savefig('outputs/dashboard_visualization.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("üìä Tableau de bord cr√©√© : outputs/dashboard_visualization.png")

if __name__ == "__main__":
    # Cr√©er le dossier de sortie
    os.makedirs("outputs", exist_ok=True)
    
    # Ex√©cuter la d√©monstration
    run_demo()
    
    # Cr√©er le tableau de bord
    create_visualization_dashboard()
